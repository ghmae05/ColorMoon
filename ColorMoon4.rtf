{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 async function captureScreenSelection() \{\
  try \{\
    const selection = await navigator.mediaDevices.getDisplayMedia(\{ video: true \});\
    const video = document.createElement('video');\
    video.srcObject = selection;\
\
    video.onloadedmetadata = () => \{\
      video.play();\
      const canvas = document.createElement('canvas');\
      canvas.width = video.videoWidth;\
      canvas.height = video.videoHeight;\
      const context = canvas.getContext('2d');\
      context.drawImage(video, 0, 0, canvas.width, canvas.height);\
      \
      // Capture les donn\'e9es de l'image pour analyser les couleurs\
      const imageData = context.getImageData(0, 0, canvas.width, canvas.height);\
      const colors = extractColors(imageData, 10); // Fonction extractColors \'e0 impl\'e9menter\
\
      // Affichage des couleurs\
      colors.forEach(color => \{\
        console.log(`RGB: $\{color.rgb\}, HEX: $\{color.hex\}, HSL: $\{color.hsl\}, CMJN: $\{color.cmyk\}, Pantone: $\{color.pantone\}`);\
      \});\
\
      video.srcObject.getTracks().forEach(track => track.stop());\
    \};\
  \} catch (err) \{\
    console.error('Erreur lors de la capture de la s\'e9lection de l\\'\'e9cran:', err);\
  \}\
\}\
\
// Appel initial de la fonction\
captureScreenSelection();\
}